[{"/home/user/Twitter_React/src/index.js":"1","/home/user/Twitter_React/src/reportWebVitals.js":"2","/home/user/Twitter_React/src/hooks/usePosts.js":"3","/home/user/Twitter_React/src/App.jsx":"4","/home/user/Twitter_React/src/api/getData.js":"5","/home/user/Twitter_React/src/components/PostsList/PostsList.jsx":"6","/home/user/Twitter_React/src/components/UserCard/UserCard.jsx":"7","/home/user/Twitter_React/src/components/PostCard/PostCard.jsx":"8","/home/user/Twitter_React/src/components/Undefined/NotFound.jsx":"9","/home/user/Twitter_React/src/components/PostItem/PostItem.jsx":"10","/home/user/Twitter_React/src/components/CommentItem/CommentItem.jsx":"11"},{"size":618,"mtime":1621844746495,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1618592532000,"results":"14","hashOfConfig":"13"},{"size":877,"mtime":1621840451987,"results":"15","hashOfConfig":"13"},{"size":830,"mtime":1621840910033,"results":"16","hashOfConfig":"13"},{"size":242,"mtime":1621258642280,"results":"17","hashOfConfig":"13"},{"size":533,"mtime":1621845005070,"results":"18","hashOfConfig":"13"},{"size":5263,"mtime":1621844627081,"results":"19","hashOfConfig":"13"},{"size":1205,"mtime":1621844155752,"results":"20","hashOfConfig":"13"},{"size":378,"mtime":1621840451987,"results":"21","hashOfConfig":"13"},{"size":1488,"mtime":1621844351426,"results":"22","hashOfConfig":"13"},{"size":1473,"mtime":1621840451987,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1xzbc68",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/home/user/Twitter_React/src/index.js",[],["50","51"],"/home/user/Twitter_React/src/reportWebVitals.js",[],"/home/user/Twitter_React/src/hooks/usePosts.js",[],"/home/user/Twitter_React/src/App.jsx",[],"/home/user/Twitter_React/src/api/getData.js",[],"/home/user/Twitter_React/src/components/PostsList/PostsList.jsx",[],"/home/user/Twitter_React/src/components/UserCard/UserCard.jsx",["52"],"import { MessageOutlined } from \"@ant-design/icons\";\nimport { Card, Input, List, Typography } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport getData from \"../../api/getData\";\n// import { usePosts } from \"../../hooks/usePosts\";\nimport { CardIcon } from \"../PostItem/PostItem\";\n\nconst { Title } = Typography;\n\nexport default function UserCard() {\n  // const { posts } = usePosts()\n  const { userId } = useParams();\n  const [user, setUser] = useState({});\n  const [userPosts, setUserPosts] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    // if(userId) {\n    //   const postItem = posts.find(post => post.user?.id === +userId)\n    //   const postsOfUser = posts.filter(post => post.userId === +userId)\n    //   if(postItem) {\n    //     setUser(postItem.user)\n    //     setUserPosts(postsOfUser)\n    //   } else {\n    //     history.push('/404')\n    //   }\n\n    userId &&\n      getData(`http://jsonplaceholder.typicode.com/users/${userId}`, (data) =>\n        setUser(data)\n      );\n    userId &&\n      getData(\n        `http://jsonplaceholder.typicode.com/posts?userId=${userId}&_embed=comments`,\n        (data) => setUserPosts(data)\n      );\n  }, [userId]);\n\n  return (\n    <>\n      <Title className=\"user_title\">\n        UserCard\n      </Title>\n      <div className=\"user_description\">\n        {user.name && <Input addonBefore=\"Name\" value={user.name} readOnly />}\n        {user.username && (\n          <Input addonBefore=\"Username\" value={user.username} readOnly />\n        )}\n        {user.email && (\n          <Input addonBefore=\"Email\" value={user.email} readOnly />\n        )}\n        {user.website && (\n          <Input addonBefore=\"Website\" value={user.website} readOnly />\n        )}\n        {user.phone && (\n          <Input addonBefore=\"Phone\" value={user.phone} readOnly />\n        )}\n        {user.address && (\n          <div className=\"user_description_item\">\n            <Title level={5} className=\"user_description_item_title\">\n              Address:\n            </Title>\n            <div>\n              {user.address?.street && (\n                <Input\n                  addonBefore=\"Street\"\n                  value={user.address?.street}\n                  readOnly\n                />\n              )}\n              {user.address?.suite && (\n                <Input\n                  addonBefore=\"Suite\"\n                  value={user.address?.suite}\n                  readOnly\n                />\n              )}\n              {user.address?.city && (\n                <Input addonBefore=\"City\" value={user.address?.city} readOnly />\n              )}\n              {user.address?.zipcode && (\n                <Input\n                  addonBefore=\"Zipcode\"\n                  value={user.address?.zipcode}\n                  readOnly\n                />\n              )}\n            </div>\n          </div>\n        )}\n        {user.address?.geo && (\n          <div className=\"user_description_item\">\n            <Title level={5} className=\"user_description_item_title\">\n              Geolocation:\n            </Title>\n            <div>\n              <Input\n                addonBefore=\"Latitude\"\n                value={user.address?.geo?.lat}\n                readOnly\n              />\n              <Input\n                addonBefore=\"Longitude\"\n                value={user.address?.geo?.lng}\n                readOnly\n              />\n            </div>\n          </div>\n        )}\n        {user.company && (\n          <div className=\"user_description_item\">\n            <Title level={5} className=\"user_description_item_title\">\n              Company:\n            </Title>\n            <div>\n              <Input addonBefore=\"Name\" value={user.company?.name} readOnly />\n              {user.company?.catchPhrase && (\n                <Input\n                  addonBefore=\"Catch Phrase\"\n                  value={user.company?.catchPhrase}\n                  readOnly\n                />\n              )}\n              {user.company?.bs && (\n                <Input addonBefore=\"Bs\" value={user.company?.bs} readOnly />\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      {!!userPosts.length && (\n        <div className=\"user_posts\">\n          <Title level={4} className=\"user_posts_title\">\n            {user.name ? `Posts of ${user.name}` : \"Posts of user\"}:\n          </Title>\n          <List\n            className=\"user_posts_list\"\n            itemLayout=\"horizontal\"\n            dataSource={userPosts}\n            renderItem={(post) => (\n              <List.Item>\n                <Card\n                  className=\"user_posts_item\"\n                  type=\"inner\"\n                  title={post.title}\n                  extra={\n                    <Link to={`/post/${post?.id}`}>\n                      <CardIcon\n                        icon={<MessageOutlined />}\n                        text={post.comments?.length}\n                      />\n                    </Link>\n                  }\n                  hoverable={true}\n                >\n                  {post.body}\n                </Card>\n              </List.Item>\n            )}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n","/home/user/Twitter_React/src/components/PostCard/PostCard.jsx",["53"],"import { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { usePosts } from \"../../hooks/usePosts\";\nimport { List, Typography } from \"antd\";\nimport CommentItem from \"../CommentItem/CommentItem\";\nimport PostItem from \"../PostItem/PostItem\";\n\nconst { Title } = Typography\n\nexport default function PostCard() {\n  const { posts } = usePosts();\n  const { postId } = useParams();\n  const [post, setPost] = useState({});\n  const history = useHistory();\n\n  useEffect(() => {\n    if (postId) {\n      const postItem = posts.find(post => post.id === +postId);\n\n      if (postItem) {\n        setPost(postItem);\n      } else {\n        history.push('/404')\n      }\n\n    }\n  }, [postId]);\n\n  return (\n    <>\n      <Title>PostCard</Title>\n      <div className=\"post_card\">\n        <PostItem item={post} />\n      </div>\n      <div className=\"post_comments\">\n        <Title level={5}>Comments of Post:</Title>\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={post.comments}\n          renderItem={(item) => (\n            <List.Item>\n              <CommentItem comment={item} />\n            </List.Item>\n          )}\n        />\n      </div>\n    </>\n  );\n}\n","/home/user/Twitter_React/src/components/Undefined/NotFound.jsx",[],"/home/user/Twitter_React/src/components/PostItem/PostItem.jsx",[],"/home/user/Twitter_React/src/components/CommentItem/CommentItem.jsx",[],["54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":17,"column":9,"nodeType":"62","messageId":"63","endLine":17,"endColumn":16},{"ruleId":"64","severity":1,"message":"65","line":27,"column":6,"nodeType":"66","endLine":27,"endColumn":14,"suggestions":"67"},{"ruleId":"56","replacedBy":"68"},{"ruleId":"58","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'posts'. Either include them or remove the dependency array.","ArrayExpression",["72"],["70"],["71"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [history, postId, posts]",{"range":"75","text":"76"},[711,719],"[history, postId, posts]"]